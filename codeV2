# import heapq
# import ast
# import math
# from collections import Counter

# class HuffmanNode:
#     """Node structure for Huffman Tree"""
#     def __init__(self, char, freq):
#         self.char = char
#         self.freq = freq
#         self.left = None
#         self.right = None

#     def __lt__(self, other):
#         return self.freq < other.freq  # For min-heap comparison

# def build_huffman_tree(text):
#     freq = Counter(text)
#     heap = [HuffmanNode(char, f) for char, f in freq.items()]
#     heapq.heapify(heap)

#     while len(heap) > 1:
#         left = heapq.heappop(heap)
#         right = heapq.heappop(heap)
#         new_node = HuffmanNode(None, left.freq + right.freq)
#         new_node.left = left
#         new_node.right = right
#         heapq.heappush(heap, new_node)

#     return heap[0]

# def generate_huffman_codes(node, prefix="", code_map=None):
#     if code_map is None:
#         code_map = {}

#     if node:
#         if node.char is not None:
#             code_map[node.char] = prefix
#         generate_huffman_codes(node.left, prefix + "0", code_map)
#         generate_huffman_codes(node.right, prefix + "1", code_map)
#     return code_map

# def huffman_encode(text):
#     root = build_huffman_tree(text)
#     huffman_codes = generate_huffman_codes(root)
#     encoded_text = "".join(huffman_codes[char] for char in text)
#     return encoded_text, huffman_codes

# def huffman_decode(encoded_text, huffman_codes):
#     reverse_codes = {code: char for char, code in huffman_codes.items()}
#     decoded_text = ""
#     current_code = ""

#     for bit in encoded_text:
#         current_code += bit
#         if current_code in reverse_codes:
#             decoded_text += reverse_codes[current_code]
#             current_code = ""
#     return decoded_text

# def shannon_entropy(text): # moataz
#     freq = Counter(text) # returns { 'm':1,'o':1,'a':2,'t':1,'z':1 }
#     total = len(text) # 6
#     entropy = 0
#     for count in freq.values():
#         p = count / total
#         entropy -= p * math.log2(p) # I add negative to make the number positive to make sense.
#     return entropy

# def average_huffman_length(codes, text):
#     freq = Counter(text)
#     total = len(text)
#     return sum(len(codes[char]) * count for char, count in freq.items()) / total

# def main_menu():
#     encoded_text = None
#     codes = None
 

#     while True:
#         print("\n--- Huffman Coding Menu ---")
#         print("1. Encode text")
#         print("2. Decode text")
#         print("3. Exit")

#         choice = input("Enter your choice (1-3): ").strip()

#         if choice == "1":
#             text = input("Enter text to encode: ")
#             encoded_text, codes = huffman_encode(text)

#             entropy = shannon_entropy(text)
#             avg_len = average_huffman_length(codes, text)
#             original_bits = len(text) * 8
#             compressed_bits = len(encoded_text)
#             compression_ratio = compressed_bits / original_bits
#             compression_percent = (1 - compressed_bits / original_bits) * 100

#             print(f"\n✅    Encoded Text: {encoded_text}")
#             print(f"📘  Huffman Codes: {codes}")
#             print(f"🧠  Shannon Entropy: {entropy:.4f} bits/symbol")
#             print(f"📊  Average Huffman Code Length: {avg_len:.4f} bits/symbol")
#             print(f"📦  Original Size: {original_bits} bits")
#             print(f"🗜️  Compressed Size: {compressed_bits} bits")
#             print(f"📉  Compression Ratio: {compression_ratio:.4f}") # if it = 0.25 => كده انا بقيت ربع حجم الداتا الاصليه
#             print(f"✅  Compression Saving: {compression_percent:.2f}%\n") # بتعبر عن انا وفرت قد ايه

#         elif choice == "2":
#             print("\n--- Decode Options ---")
#             use_existing = input("Use previously encoded data? (y/n): ").lower().strip()

#             if use_existing == "y":
#                 if encoded_text and codes:
#                     decoded_text = huffman_decode(encoded_text, codes)
#                     print(f"\n🔓 Decoded Text: {decoded_text}")
#                 else:
#                     print("⚠️  No previously encoded data found. Please encode text first.")
#             else:
#                 binary_input = input("Enter binary encoded string: ").strip()
#                 codes_input = input("Enter Huffman code map (as Python dict, e.g., {'a': '0', 'b': '10'}): ").strip()

#                 try:
#                     codes_dict = ast.literal_eval(codes_input)
#                     if not isinstance(codes_dict, dict):
#                         raise ValueError("Code map must be a dictionary.")
#                     decoded_text = huffman_decode(binary_input, codes_dict)
#                     print(f"\n🔓 Decoded Text: {decoded_text}")
#                 except Exception as e:
#                     print(f"❌ Invalid input. Error: {e}")

#         elif choice == "3":
#             print("👋 Exiting program.")
#             break

#         else:
#             print("❌ Invalid choice. Please select 1, 2, or 3.")

# if __name__ == "__main__":
#     main_menu()
import heapq
import ast
import math
from collections import Counter
from PIL import Image
from scipy.io import wavfile
import numpy as np


# -----------------------------
# Huffman Tree Node
# -----------------------------
class HuffmanNode:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq  # for priority queue


# -----------------------------
# Huffman Tree for any data
# -----------------------------
def build_huffman_tree(data):
    freq = Counter(data)
    heap = [HuffmanNode(symbol, f) for symbol, f in freq.items()]
    heapq.heapify(heap)

    while len(heap) > 1:
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        new_node = HuffmanNode(None, left.freq + right.freq)
        new_node.left = left
        new_node.right = right
        heapq.heappush(heap, new_node)

    return heap[0]


# -----------------------------
# Generate Huffman Codes
# -----------------------------
def generate_huffman_codes(node, prefix="", code_map=None):
    if code_map is None:
        code_map = {}
    if node:
        if node.char is not None:
            code_map[node.char] = prefix
        generate_huffman_codes(node.left, prefix + "0", code_map)
        generate_huffman_codes(node.right, prefix + "1", code_map)
    return code_map


# -----------------------------
# Huffman Encode/Decode Text
# -----------------------------
def huffman_encode(text):
    root = build_huffman_tree(text)
    huffman_codes = generate_huffman_codes(root)
    encoded_text = "".join(huffman_codes[char] for char in text)
    return encoded_text, huffman_codes


def huffman_decode(encoded_text, huffman_codes):
    reverse_codes = {code: char for char, code in huffman_codes.items()}
    decoded_text = ""
    current_code = ""

    for bit in encoded_text:
        current_code += bit
        if current_code in reverse_codes:
            decoded_text += reverse_codes[current_code]
            current_code = ""
    return decoded_text


# -----------------------------
# Shannon Entropy
# -----------------------------
def shannon_entropy(data):
    freq = Counter(data)
    total = len(data)
    entropy = 0
    for count in freq.values():
        p = count / total
        entropy -= p * math.log2(p)
    return entropy


# -----------------------------
# Average Huffman Code Length
# -----------------------------
def average_huffman_length(codes, data):
    freq = Counter(data)
    total = len(data)
    return sum(len(codes[symbol]) * count for symbol, count in freq.items()) / total


# -----------------------------
# Image Compression Functions
# -----------------------------
def load_image_grayscale(path):
    image = Image.open(path).convert('L')  # Grayscale
    pixel_values = list(image.getdata())
    width, height = image.size
    return pixel_values, width, height


def huffman_encode_image(pixels):
    root = build_huffman_tree(pixels)
    codes = generate_huffman_codes(root)
    encoded = ''.join(codes[p] for p in pixels)
    return encoded, codes


def huffman_decode_image(encoded, codes):
    reverse = {v: k for k, v in codes.items()}
    current = ""
    decoded = []
    for bit in encoded:
        current += bit
        if current in reverse:
            decoded.append(reverse[current])
            current = ""
    return decoded


def save_image_from_pixels(pixels, width, height, path="decoded_image.png"):
    image = Image.new('L', (width, height))
    image.putdata(pixels)
    image.save(path)

# -----------------------------
# Audio Compression Functions
# -----------------------------

def load_audio(path):
    sample_rate, data = wavfile.read(path)
    if data.ndim > 1:
        data = data.mean(axis=1).astype(np.int16)  # Convert to mono if stereo
    return sample_rate, data.tolist()

def huffman_encode_audio(samples):
    root = build_huffman_tree(samples)
    codes = generate_huffman_codes(root)
    encoded = ''.join(codes[sample] for sample in samples)
    return encoded, codes

def huffman_decode_audio(encoded, codes):
    reverse = {v: k for k, v in codes.items()}
    current = ""
    decoded = []
    for bit in encoded:
        current += bit
        if current in reverse:
            decoded.append(reverse[current])
            current = ""
    return decoded

def save_audio(samples, sample_rate, path="decoded_audio.wav"):
    audio_data = np.array(samples, dtype=np.int16)
    wavfile.write(path, sample_rate, audio_data)



# -----------------------------
# Main Menu
# -----------------------------
def main_menu():
    encoded_text = None
    codes = None
    image_encoded = None
    image_codes = None
    image_size = None

    while True:
        print("\n--- Huffman Compression Menu ---")
        print("1. Encode Text")
        print("2. Decode Text")
        print("3. Compress Image (Grayscale PNG)")
        print("4. Decompress Image")
        print("5. Compress Audio (WAV)")
        print("6. Decompress Audio")
        print("7. Exit")


        choice = input("Enter your choice (1-5): ").strip()

        if choice == "1":
            text = input("Enter text to encode: ")
            encoded_text, codes = huffman_encode(text)

            entropy = shannon_entropy(text)
            avg_len = average_huffman_length(codes, text)
            original_bits = len(text) * 8
            compressed_bits = len(encoded_text)
            compression_ratio = compressed_bits / original_bits
            compression_percent = (1 - compression_ratio) * 100

            print(f"\n✅ Encoded Text: {encoded_text}")
            print(f"📘 Huffman Codes: {codes}")
            print(f"🧠 Shannon Entropy: {entropy:.4f} bits/symbol")
            print(f"📊 Average Huffman Code Length: {avg_len:.4f} bits/symbol")
            print(f"📦 Original Size: {original_bits} bits")
            print(f"🗜️ Compressed Size: {compressed_bits} bits")
            print(f"📉 Compression Ratio: {compression_ratio:.4f}")
            print(f"✅ Compression Saving: {compression_percent:.2f}%")

        elif choice == "2":
            use_existing = input("Use previously encoded data? (y/n): ").lower().strip()
            if use_existing == "y" and encoded_text and codes:
                decoded_text = huffman_decode(encoded_text, codes)
                print(f"\n🔓 Decoded Text: {decoded_text}")
            else:
                binary_input = input("Enter encoded binary string: ").strip()
                codes_input = input("Enter Huffman codes (dict format): ").strip()
                try:
                    code_map = ast.literal_eval(codes_input)
                    if not isinstance(code_map, dict):
                        raise ValueError("Not a dictionary.")
                    decoded_text = huffman_decode(binary_input, code_map)
                    print(f"\n🔓 Decoded Text: {decoded_text}")
                except Exception as e:
                    print(f"❌ Invalid input. Error: {e}")

        elif choice == "3":
            path = input("Enter path to grayscale image (e.g. image.png): ").strip()
            try:
                pixels, width, height = load_image_grayscale(path)
                image_encoded, image_codes = huffman_encode_image(pixels)
                image_size = (width, height)

                entropy = shannon_entropy(pixels)
                avg_len = average_huffman_length(image_codes, pixels)
                original_bits = len(pixels) * 8
                compressed_bits = len(image_encoded)
                compression_ratio = compressed_bits / original_bits
                compression_percent = (1 - compression_ratio) * 100

                print(f"\n📷 Image Compressed Successfully!")
                print(f"🧠 Shannon Entropy: {entropy:.4f} bits/pixel")
                print(f"📊 Avg Huffman Code Length: {avg_len:.4f} bits/pixel")
                print(f"📦 Original Size: {original_bits} bits")
                print(f"🗜️ Compressed Size: {compressed_bits} bits")
                print(f"📉 Compression Ratio: {compression_ratio:.4f}")
                print(f"✅ Compression Saving: {compression_percent:.2f}%")

            except Exception as e:
                print(f"❌ Failed to process image. Error: {e}")

        elif choice == "4":
            if image_encoded and image_codes and image_size:
                decoded_pixels = huffman_decode_image(image_encoded, image_codes)
                save_image_from_pixels(decoded_pixels, *image_size)
                print("✅ Image decompressed and saved as 'decoded_image.png'")
            else:
                print("⚠️ No image compressed yet. Please compress one first.")

        elif choice == "5":
            path = input("Enter WAV file path: ").strip()
            try:
                sample_rate, samples = load_audio(path)
                audio_encoded, audio_codes = huffman_encode_audio(samples)

                entropy = shannon_entropy(samples)
                avg_len = average_huffman_length(audio_codes, samples)
                original_bits = len(samples) * 16  # assuming 16-bit PCM
                compressed_bits = len(audio_encoded)
                compression_ratio = compressed_bits / original_bits
                compression_percent = (1 - compression_ratio) * 100

                print(f"\n🎧 Audio encoded successfully.")
                print(f"🧠 Entropy: {entropy:.4f} bits/sample")
                print(f"📊 Avg Huffman Code Length: {avg_len:.4f} bits/sample")
                print(f"📦 Original Size: {original_bits} bits")
                print(f"🗜️  Compressed Size: {compressed_bits} bits")
                print(f"📉 Compression Ratio: {compression_ratio:.4f}")
                print(f"✅ Compression Saving: {compression_percent:.2f}%")

                # Store for decompression
                global stored_audio_encoded, stored_audio_codes, stored_sample_rate
                stored_audio_encoded = audio_encoded
                stored_audio_codes = audio_codes
                stored_sample_rate = sample_rate

            except Exception as e:
                print(f"❌ Failed to compress audio. Error: {e}")

        elif choice == "6":
            try:
                if not all([stored_audio_encoded, stored_audio_codes, stored_sample_rate]):
                    raise ValueError("No compressed audio data available.")
                decoded_samples = huffman_decode_audio(stored_audio_encoded, stored_audio_codes)
                save_audio(decoded_samples, stored_sample_rate)
                print("✅ Audio decoded and saved as 'decoded_audio.wav'")
            except Exception as e:
                print(f"❌ Failed to decode audio. Error: {e}")

        elif choice == "7":
            print("👋 Exiting program.")
            break

        else:
            print("❌ Invalid choice. Please select 1-5.")

# -----------------------------
# Run Program
# -----------------------------
if __name__ == "__main__":
    main_menu()
